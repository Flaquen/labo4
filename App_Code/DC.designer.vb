'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.34014
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="labo4-tf")>  _
Partial Public Class DCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAuto_Caracteristica(instance As Auto_Caracteristica)
    End Sub
  Partial Private Sub UpdateAuto_Caracteristica(instance As Auto_Caracteristica)
    End Sub
  Partial Private Sub DeleteAuto_Caracteristica(instance As Auto_Caracteristica)
    End Sub
  Partial Private Sub InsertAuto_Clasificacion(instance As Auto_Clasificacion)
    End Sub
  Partial Private Sub UpdateAuto_Clasificacion(instance As Auto_Clasificacion)
    End Sub
  Partial Private Sub DeleteAuto_Clasificacion(instance As Auto_Clasificacion)
    End Sub
  Partial Private Sub InsertCaracteristica(instance As Caracteristica)
    End Sub
  Partial Private Sub UpdateCaracteristica(instance As Caracteristica)
    End Sub
  Partial Private Sub DeleteCaracteristica(instance As Caracteristica)
    End Sub
  Partial Private Sub InsertClasificacion(instance As Clasificacion)
    End Sub
  Partial Private Sub UpdateClasificacion(instance As Clasificacion)
    End Sub
  Partial Private Sub DeleteClasificacion(instance As Clasificacion)
    End Sub
  Partial Private Sub InsertCritica(instance As Critica)
    End Sub
  Partial Private Sub UpdateCritica(instance As Critica)
    End Sub
  Partial Private Sub DeleteCritica(instance As Critica)
    End Sub
  Partial Private Sub InsertFoto(instance As Foto)
    End Sub
  Partial Private Sub UpdateFoto(instance As Foto)
    End Sub
  Partial Private Sub DeleteFoto(instance As Foto)
    End Sub
  Partial Private Sub InsertNoticia(instance As Noticia)
    End Sub
  Partial Private Sub UpdateNoticia(instance As Noticia)
    End Sub
  Partial Private Sub DeleteNoticia(instance As Noticia)
    End Sub
  Partial Private Sub InsertObjetoAuto(instance As ObjetoAuto)
    End Sub
  Partial Private Sub UpdateObjetoAuto(instance As ObjetoAuto)
    End Sub
  Partial Private Sub DeleteObjetoAuto(instance As ObjetoAuto)
    End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("labo4_tfConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Auto_Caracteristica() As System.Data.Linq.Table(Of Auto_Caracteristica)
		Get
			Return Me.GetTable(Of Auto_Caracteristica)
		End Get
	End Property
	
	Public ReadOnly Property Auto_Clasificacion() As System.Data.Linq.Table(Of Auto_Clasificacion)
		Get
			Return Me.GetTable(Of Auto_Clasificacion)
		End Get
	End Property
	
	Public ReadOnly Property Caracteristica() As System.Data.Linq.Table(Of Caracteristica)
		Get
			Return Me.GetTable(Of Caracteristica)
		End Get
	End Property
	
	Public ReadOnly Property Clasificacion() As System.Data.Linq.Table(Of Clasificacion)
		Get
			Return Me.GetTable(Of Clasificacion)
		End Get
	End Property
	
	Public ReadOnly Property Critica() As System.Data.Linq.Table(Of Critica)
		Get
			Return Me.GetTable(Of Critica)
		End Get
	End Property
	
	Public ReadOnly Property Foto() As System.Data.Linq.Table(Of Foto)
		Get
			Return Me.GetTable(Of Foto)
		End Get
	End Property
	
	Public ReadOnly Property Noticia() As System.Data.Linq.Table(Of Noticia)
		Get
			Return Me.GetTable(Of Noticia)
		End Get
	End Property
	
	Public ReadOnly Property ObjetoAuto() As System.Data.Linq.Table(Of ObjetoAuto)
		Get
			Return Me.GetTable(Of ObjetoAuto)
		End Get
	End Property
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Auto_Caracteristica")>  _
Partial Public Class Auto_Caracteristica
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_auto_caracteristica As Integer
	
	Private _id_auto As Integer
	
	Private _id_caracteristica As Integer
	
	Private _Caracteristica As EntityRef(Of Caracteristica)
	
	Private _ObjetoAuto As EntityRef(Of ObjetoAuto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_auto_caracteristicaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_auto_caracteristicaChanged()
    End Sub
    Partial Private Sub Onid_autoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_autoChanged()
    End Sub
    Partial Private Sub Onid_caracteristicaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_caracteristicaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Caracteristica = CType(Nothing, EntityRef(Of Caracteristica))
		Me._ObjetoAuto = CType(Nothing, EntityRef(Of ObjetoAuto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_auto_caracteristica", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_auto_caracteristica() As Integer
		Get
			Return Me._id_auto_caracteristica
		End Get
		Set
			If ((Me._id_auto_caracteristica = value)  _
						= false) Then
				Me.Onid_auto_caracteristicaChanging(value)
				Me.SendPropertyChanging
				Me._id_auto_caracteristica = value
				Me.SendPropertyChanged("id_auto_caracteristica")
				Me.Onid_auto_caracteristicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_auto", DbType:="Int NOT NULL")>  _
	Public Property id_auto() As Integer
		Get
			Return Me._id_auto
		End Get
		Set
			If ((Me._id_auto = value)  _
						= false) Then
				If Me._ObjetoAuto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_autoChanging(value)
				Me.SendPropertyChanging
				Me._id_auto = value
				Me.SendPropertyChanged("id_auto")
				Me.Onid_autoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_caracteristica", DbType:="Int NOT NULL")>  _
	Public Property id_caracteristica() As Integer
		Get
			Return Me._id_caracteristica
		End Get
		Set
			If ((Me._id_caracteristica = value)  _
						= false) Then
				If Me._Caracteristica.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_caracteristicaChanging(value)
				Me.SendPropertyChanging
				Me._id_caracteristica = value
				Me.SendPropertyChanged("id_caracteristica")
				Me.Onid_caracteristicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Caracteristica_Auto_Caracteristica", Storage:="_Caracteristica", ThisKey:="id_caracteristica", OtherKey:="id_caracteristica", IsForeignKey:=true)>  _
	Public Property Caracteristica() As Caracteristica
		Get
			Return Me._Caracteristica.Entity
		End Get
		Set
			Dim previousValue As Caracteristica = Me._Caracteristica.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Caracteristica.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Caracteristica.Entity = Nothing
					previousValue.Auto_Caracteristica.Remove(Me)
				End If
				Me._Caracteristica.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Auto_Caracteristica.Add(Me)
					Me._id_caracteristica = value.id_caracteristica
				Else
					Me._id_caracteristica = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Caracteristica")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ObjetoAuto_Auto_Caracteristica", Storage:="_ObjetoAuto", ThisKey:="id_auto", OtherKey:="id_auto", IsForeignKey:=true)>  _
	Public Property ObjetoAuto() As ObjetoAuto
		Get
			Return Me._ObjetoAuto.Entity
		End Get
		Set
			Dim previousValue As ObjetoAuto = Me._ObjetoAuto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ObjetoAuto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ObjetoAuto.Entity = Nothing
					previousValue.Auto_Caracteristica.Remove(Me)
				End If
				Me._ObjetoAuto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Auto_Caracteristica.Add(Me)
					Me._id_auto = value.id_auto
				Else
					Me._id_auto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ObjetoAuto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Auto_Clasificacion")>  _
Partial Public Class Auto_Clasificacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_auto_clasificacion As Integer
	
	Private _id_auto As Integer
	
	Private _id_clasificacion As Integer
	
	Private _Clasificacion As EntityRef(Of Clasificacion)
	
	Private _ObjetoAuto As EntityRef(Of ObjetoAuto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_auto_clasificacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_auto_clasificacionChanged()
    End Sub
    Partial Private Sub Onid_autoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_autoChanged()
    End Sub
    Partial Private Sub Onid_clasificacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_clasificacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Clasificacion = CType(Nothing, EntityRef(Of Clasificacion))
		Me._ObjetoAuto = CType(Nothing, EntityRef(Of ObjetoAuto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_auto_clasificacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_auto_clasificacion() As Integer
		Get
			Return Me._id_auto_clasificacion
		End Get
		Set
			If ((Me._id_auto_clasificacion = value)  _
						= false) Then
				Me.Onid_auto_clasificacionChanging(value)
				Me.SendPropertyChanging
				Me._id_auto_clasificacion = value
				Me.SendPropertyChanged("id_auto_clasificacion")
				Me.Onid_auto_clasificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_auto", DbType:="Int NOT NULL")>  _
	Public Property id_auto() As Integer
		Get
			Return Me._id_auto
		End Get
		Set
			If ((Me._id_auto = value)  _
						= false) Then
				If Me._ObjetoAuto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_autoChanging(value)
				Me.SendPropertyChanging
				Me._id_auto = value
				Me.SendPropertyChanged("id_auto")
				Me.Onid_autoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_clasificacion", DbType:="Int NOT NULL")>  _
	Public Property id_clasificacion() As Integer
		Get
			Return Me._id_clasificacion
		End Get
		Set
			If ((Me._id_clasificacion = value)  _
						= false) Then
				If Me._Clasificacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_clasificacionChanging(value)
				Me.SendPropertyChanging
				Me._id_clasificacion = value
				Me.SendPropertyChanged("id_clasificacion")
				Me.Onid_clasificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Clasificacion_Auto_Clasificacion", Storage:="_Clasificacion", ThisKey:="id_clasificacion", OtherKey:="id_clasificacion", IsForeignKey:=true)>  _
	Public Property Clasificacion() As Clasificacion
		Get
			Return Me._Clasificacion.Entity
		End Get
		Set
			Dim previousValue As Clasificacion = Me._Clasificacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Clasificacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Clasificacion.Entity = Nothing
					previousValue.Auto_Clasificacion.Remove(Me)
				End If
				Me._Clasificacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Auto_Clasificacion.Add(Me)
					Me._id_clasificacion = value.id_clasificacion
				Else
					Me._id_clasificacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Clasificacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ObjetoAuto_Auto_Clasificacion", Storage:="_ObjetoAuto", ThisKey:="id_auto", OtherKey:="id_auto", IsForeignKey:=true)>  _
	Public Property ObjetoAuto() As ObjetoAuto
		Get
			Return Me._ObjetoAuto.Entity
		End Get
		Set
			Dim previousValue As ObjetoAuto = Me._ObjetoAuto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ObjetoAuto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ObjetoAuto.Entity = Nothing
					previousValue.Auto_Clasificacion.Remove(Me)
				End If
				Me._ObjetoAuto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Auto_Clasificacion.Add(Me)
					Me._id_auto = value.id_auto
				Else
					Me._id_auto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ObjetoAuto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Caracteristica")>  _
Partial Public Class Caracteristica
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_caracteristica As Integer
	
	Private _denominacion As String
	
	Private _fechAlta As Date
	
	Private _fechaBaja As System.Nullable(Of Date)
	
	Private _Auto_Caracteristica As EntitySet(Of Auto_Caracteristica)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_caracteristicaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_caracteristicaChanged()
    End Sub
    Partial Private Sub OndenominacionChanging(value As String)
    End Sub
    Partial Private Sub OndenominacionChanged()
    End Sub
    Partial Private Sub OnfechAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechAltaChanged()
    End Sub
    Partial Private Sub OnfechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaBajaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Auto_Caracteristica = New EntitySet(Of Auto_Caracteristica)(AddressOf Me.attach_Auto_Caracteristica, AddressOf Me.detach_Auto_Caracteristica)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_caracteristica", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_caracteristica() As Integer
		Get
			Return Me._id_caracteristica
		End Get
		Set
			If ((Me._id_caracteristica = value)  _
						= false) Then
				Me.Onid_caracteristicaChanging(value)
				Me.SendPropertyChanging
				Me._id_caracteristica = value
				Me.SendPropertyChanged("id_caracteristica")
				Me.Onid_caracteristicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_denominacion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property denominacion() As String
		Get
			Return Me._denominacion
		End Get
		Set
			If (String.Equals(Me._denominacion, value) = false) Then
				Me.OndenominacionChanging(value)
				Me.SendPropertyChanging
				Me._denominacion = value
				Me.SendPropertyChanged("denominacion")
				Me.OndenominacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechAlta", DbType:="DateTime NOT NULL")>  _
	Public Property fechAlta() As Date
		Get
			Return Me._fechAlta
		End Get
		Set
			If ((Me._fechAlta = value)  _
						= false) Then
				Me.OnfechAltaChanging(value)
				Me.SendPropertyChanging
				Me._fechAlta = value
				Me.SendPropertyChanged("fechAlta")
				Me.OnfechAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaBaja", DbType:="DateTime")>  _
	Public Property fechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._fechaBaja
		End Get
		Set
			If (Me._fechaBaja.Equals(value) = false) Then
				Me.OnfechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._fechaBaja = value
				Me.SendPropertyChanged("fechaBaja")
				Me.OnfechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Caracteristica_Auto_Caracteristica", Storage:="_Auto_Caracteristica", ThisKey:="id_caracteristica", OtherKey:="id_caracteristica")>  _
	Public Property Auto_Caracteristica() As EntitySet(Of Auto_Caracteristica)
		Get
			Return Me._Auto_Caracteristica
		End Get
		Set
			Me._Auto_Caracteristica.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Auto_Caracteristica(ByVal entity As Auto_Caracteristica)
		Me.SendPropertyChanging
		entity.Caracteristica = Me
	End Sub
	
	Private Sub detach_Auto_Caracteristica(ByVal entity As Auto_Caracteristica)
		Me.SendPropertyChanging
		entity.Caracteristica = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Clasificacion")>  _
Partial Public Class Clasificacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_clasificacion As Integer
	
	Private _denominacion As String
	
	Private _fechaAlta As Date
	
	Private _fechaBaja As System.Nullable(Of Date)
	
	Private _id_usuario As Integer
	
	Private _fk_clasificacion As System.Nullable(Of Integer)
	
	Private _Auto_Clasificacion As EntitySet(Of Auto_Clasificacion)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_clasificacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_clasificacionChanged()
    End Sub
    Partial Private Sub OndenominacionChanging(value As String)
    End Sub
    Partial Private Sub OndenominacionChanged()
    End Sub
    Partial Private Sub OnfechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaAltaChanged()
    End Sub
    Partial Private Sub OnfechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaBajaChanged()
    End Sub
    Partial Private Sub Onid_usuarioChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_usuarioChanged()
    End Sub
    Partial Private Sub Onfk_clasificacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfk_clasificacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Auto_Clasificacion = New EntitySet(Of Auto_Clasificacion)(AddressOf Me.attach_Auto_Clasificacion, AddressOf Me.detach_Auto_Clasificacion)
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_clasificacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_clasificacion() As Integer
		Get
			Return Me._id_clasificacion
		End Get
		Set
			If ((Me._id_clasificacion = value)  _
						= false) Then
				Me.Onid_clasificacionChanging(value)
				Me.SendPropertyChanging
				Me._id_clasificacion = value
				Me.SendPropertyChanged("id_clasificacion")
				Me.Onid_clasificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_denominacion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property denominacion() As String
		Get
			Return Me._denominacion
		End Get
		Set
			If (String.Equals(Me._denominacion, value) = false) Then
				Me.OndenominacionChanging(value)
				Me.SendPropertyChanging
				Me._denominacion = value
				Me.SendPropertyChanged("denominacion")
				Me.OndenominacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaAlta", DbType:="DateTime NOT NULL")>  _
	Public Property fechaAlta() As Date
		Get
			Return Me._fechaAlta
		End Get
		Set
			If ((Me._fechaAlta = value)  _
						= false) Then
				Me.OnfechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._fechaAlta = value
				Me.SendPropertyChanged("fechaAlta")
				Me.OnfechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaBaja", DbType:="DateTime")>  _
	Public Property fechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._fechaBaja
		End Get
		Set
			If (Me._fechaBaja.Equals(value) = false) Then
				Me.OnfechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._fechaBaja = value
				Me.SendPropertyChanged("fechaBaja")
				Me.OnfechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_usuario", DbType:="Int NOT NULL")>  _
	Public Property id_usuario() As Integer
		Get
			Return Me._id_usuario
		End Get
		Set
			If ((Me._id_usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._id_usuario = value
				Me.SendPropertyChanged("id_usuario")
				Me.Onid_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fk_clasificacion", DbType:="Int")>  _
	Public Property fk_clasificacion() As System.Nullable(Of Integer)
		Get
			Return Me._fk_clasificacion
		End Get
		Set
			If (Me._fk_clasificacion.Equals(value) = false) Then
				Me.Onfk_clasificacionChanging(value)
				Me.SendPropertyChanging
				Me._fk_clasificacion = value
				Me.SendPropertyChanged("fk_clasificacion")
				Me.Onfk_clasificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Clasificacion_Auto_Clasificacion", Storage:="_Auto_Clasificacion", ThisKey:="id_clasificacion", OtherKey:="id_clasificacion")>  _
	Public Property Auto_Clasificacion() As EntitySet(Of Auto_Clasificacion)
		Get
			Return Me._Auto_Clasificacion
		End Get
		Set
			Me._Auto_Clasificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Clasificacion", Storage:="_Usuario", ThisKey:="id_usuario", OtherKey:="id_usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Clasificacion.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Clasificacion.Add(Me)
					Me._id_usuario = value.id_usuario
				Else
					Me._id_usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Auto_Clasificacion(ByVal entity As Auto_Clasificacion)
		Me.SendPropertyChanging
		entity.Clasificacion = Me
	End Sub
	
	Private Sub detach_Auto_Clasificacion(ByVal entity As Auto_Clasificacion)
		Me.SendPropertyChanging
		entity.Clasificacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Critica")>  _
Partial Public Class Critica
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_critica As Integer
	
	Private _puntaje As Integer
	
	Private _detalle As String
	
	Private _fechaCritica As Date
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_criticaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_criticaChanged()
    End Sub
    Partial Private Sub OnpuntajeChanging(value As Integer)
    End Sub
    Partial Private Sub OnpuntajeChanged()
    End Sub
    Partial Private Sub OndetalleChanging(value As String)
    End Sub
    Partial Private Sub OndetalleChanged()
    End Sub
    Partial Private Sub OnfechaCriticaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaCriticaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_critica", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_critica() As Integer
		Get
			Return Me._id_critica
		End Get
		Set
			If ((Me._id_critica = value)  _
						= false) Then
				Me.Onid_criticaChanging(value)
				Me.SendPropertyChanging
				Me._id_critica = value
				Me.SendPropertyChanged("id_critica")
				Me.Onid_criticaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_puntaje", DbType:="Int NOT NULL")>  _
	Public Property puntaje() As Integer
		Get
			Return Me._puntaje
		End Get
		Set
			If ((Me._puntaje = value)  _
						= false) Then
				Me.OnpuntajeChanging(value)
				Me.SendPropertyChanging
				Me._puntaje = value
				Me.SendPropertyChanged("puntaje")
				Me.OnpuntajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detalle", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property detalle() As String
		Get
			Return Me._detalle
		End Get
		Set
			If (String.Equals(Me._detalle, value) = false) Then
				Me.OndetalleChanging(value)
				Me.SendPropertyChanging
				Me._detalle = value
				Me.SendPropertyChanged("detalle")
				Me.OndetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaCritica", DbType:="DateTime NOT NULL")>  _
	Public Property fechaCritica() As Date
		Get
			Return Me._fechaCritica
		End Get
		Set
			If ((Me._fechaCritica = value)  _
						= false) Then
				Me.OnfechaCriticaChanging(value)
				Me.SendPropertyChanging
				Me._fechaCritica = value
				Me.SendPropertyChanged("fechaCritica")
				Me.OnfechaCriticaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Foto")>  _
Partial Public Class Foto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_foto As Integer
	
	Private _rutaArchivo As String
	
	Private _id_auto As Integer
	
	Private _ObjetoAuto As EntityRef(Of ObjetoAuto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_fotoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_fotoChanged()
    End Sub
    Partial Private Sub OnrutaArchivoChanging(value As String)
    End Sub
    Partial Private Sub OnrutaArchivoChanged()
    End Sub
    Partial Private Sub Onid_autoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_autoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ObjetoAuto = CType(Nothing, EntityRef(Of ObjetoAuto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_foto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_foto() As Integer
		Get
			Return Me._id_foto
		End Get
		Set
			If ((Me._id_foto = value)  _
						= false) Then
				Me.Onid_fotoChanging(value)
				Me.SendPropertyChanging
				Me._id_foto = value
				Me.SendPropertyChanged("id_foto")
				Me.Onid_fotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rutaArchivo", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property rutaArchivo() As String
		Get
			Return Me._rutaArchivo
		End Get
		Set
			If (String.Equals(Me._rutaArchivo, value) = false) Then
				Me.OnrutaArchivoChanging(value)
				Me.SendPropertyChanging
				Me._rutaArchivo = value
				Me.SendPropertyChanged("rutaArchivo")
				Me.OnrutaArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_auto", DbType:="Int NOT NULL")>  _
	Public Property id_auto() As Integer
		Get
			Return Me._id_auto
		End Get
		Set
			If ((Me._id_auto = value)  _
						= false) Then
				If Me._ObjetoAuto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_autoChanging(value)
				Me.SendPropertyChanging
				Me._id_auto = value
				Me.SendPropertyChanged("id_auto")
				Me.Onid_autoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ObjetoAuto_Foto", Storage:="_ObjetoAuto", ThisKey:="id_auto", OtherKey:="id_auto", IsForeignKey:=true)>  _
	Public Property ObjetoAuto() As ObjetoAuto
		Get
			Return Me._ObjetoAuto.Entity
		End Get
		Set
			Dim previousValue As ObjetoAuto = Me._ObjetoAuto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ObjetoAuto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ObjetoAuto.Entity = Nothing
					previousValue.Foto.Remove(Me)
				End If
				Me._ObjetoAuto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Foto.Add(Me)
					Me._id_auto = value.id_auto
				Else
					Me._id_auto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ObjetoAuto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Noticia")>  _
Partial Public Class Noticia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_noticia As Integer
	
	Private _detalle As String
	
	Private _fechaNoticia As Date
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_noticiaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_noticiaChanged()
    End Sub
    Partial Private Sub OndetalleChanging(value As String)
    End Sub
    Partial Private Sub OndetalleChanged()
    End Sub
    Partial Private Sub OnfechaNoticiaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaNoticiaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_noticia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_noticia() As Integer
		Get
			Return Me._id_noticia
		End Get
		Set
			If ((Me._id_noticia = value)  _
						= false) Then
				Me.Onid_noticiaChanging(value)
				Me.SendPropertyChanging
				Me._id_noticia = value
				Me.SendPropertyChanged("id_noticia")
				Me.Onid_noticiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detalle", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property detalle() As String
		Get
			Return Me._detalle
		End Get
		Set
			If (String.Equals(Me._detalle, value) = false) Then
				Me.OndetalleChanging(value)
				Me.SendPropertyChanging
				Me._detalle = value
				Me.SendPropertyChanged("detalle")
				Me.OndetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaNoticia", DbType:="DateTime NOT NULL")>  _
	Public Property fechaNoticia() As Date
		Get
			Return Me._fechaNoticia
		End Get
		Set
			If ((Me._fechaNoticia = value)  _
						= false) Then
				Me.OnfechaNoticiaChanging(value)
				Me.SendPropertyChanging
				Me._fechaNoticia = value
				Me.SendPropertyChanged("fechaNoticia")
				Me.OnfechaNoticiaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ObjetoAuto")>  _
Partial Public Class ObjetoAuto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_auto As Integer
	
	Private _destacado As Boolean
	
	Private _fechaAlta As Date
	
	Private _fechaBaja As System.Nullable(Of Date)
	
	Private _color As String
	
	Private _nuevo_usado As Boolean
	
	Private _tipo As String
	
	Private _combustible As String
	
	Private _kilometraje As Integer
	
	Private _titulo As String
	
	Private _precio As Decimal
	
	Private _id_usuario As Integer
	
	Private _Auto_Caracteristica As EntitySet(Of Auto_Caracteristica)
	
	Private _Auto_Clasificacion As EntitySet(Of Auto_Clasificacion)
	
	Private _Foto As EntitySet(Of Foto)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_autoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_autoChanged()
    End Sub
    Partial Private Sub OndestacadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OndestacadoChanged()
    End Sub
    Partial Private Sub OnfechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaAltaChanged()
    End Sub
    Partial Private Sub OnfechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaBajaChanged()
    End Sub
    Partial Private Sub OncolorChanging(value As String)
    End Sub
    Partial Private Sub OncolorChanged()
    End Sub
    Partial Private Sub Onnuevo_usadoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onnuevo_usadoChanged()
    End Sub
    Partial Private Sub OntipoChanging(value As String)
    End Sub
    Partial Private Sub OntipoChanged()
    End Sub
    Partial Private Sub OncombustibleChanging(value As String)
    End Sub
    Partial Private Sub OncombustibleChanged()
    End Sub
    Partial Private Sub OnkilometrajeChanging(value As Integer)
    End Sub
    Partial Private Sub OnkilometrajeChanged()
    End Sub
    Partial Private Sub OntituloChanging(value As String)
    End Sub
    Partial Private Sub OntituloChanged()
    End Sub
    Partial Private Sub OnprecioChanging(value As Decimal)
    End Sub
    Partial Private Sub OnprecioChanged()
    End Sub
    Partial Private Sub Onid_usuarioChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_usuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Auto_Caracteristica = New EntitySet(Of Auto_Caracteristica)(AddressOf Me.attach_Auto_Caracteristica, AddressOf Me.detach_Auto_Caracteristica)
		Me._Auto_Clasificacion = New EntitySet(Of Auto_Clasificacion)(AddressOf Me.attach_Auto_Clasificacion, AddressOf Me.detach_Auto_Clasificacion)
		Me._Foto = New EntitySet(Of Foto)(AddressOf Me.attach_Foto, AddressOf Me.detach_Foto)
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_auto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_auto() As Integer
		Get
			Return Me._id_auto
		End Get
		Set
			If ((Me._id_auto = value)  _
						= false) Then
				Me.Onid_autoChanging(value)
				Me.SendPropertyChanging
				Me._id_auto = value
				Me.SendPropertyChanged("id_auto")
				Me.Onid_autoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_destacado", DbType:="Bit NOT NULL")>  _
	Public Property destacado() As Boolean
		Get
			Return Me._destacado
		End Get
		Set
			If ((Me._destacado = value)  _
						= false) Then
				Me.OndestacadoChanging(value)
				Me.SendPropertyChanging
				Me._destacado = value
				Me.SendPropertyChanged("destacado")
				Me.OndestacadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaAlta", DbType:="DateTime NOT NULL")>  _
	Public Property fechaAlta() As Date
		Get
			Return Me._fechaAlta
		End Get
		Set
			If ((Me._fechaAlta = value)  _
						= false) Then
				Me.OnfechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._fechaAlta = value
				Me.SendPropertyChanged("fechaAlta")
				Me.OnfechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaBaja", DbType:="DateTime")>  _
	Public Property fechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._fechaBaja
		End Get
		Set
			If (Me._fechaBaja.Equals(value) = false) Then
				Me.OnfechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._fechaBaja = value
				Me.SendPropertyChanged("fechaBaja")
				Me.OnfechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_color", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property color() As String
		Get
			Return Me._color
		End Get
		Set
			If (String.Equals(Me._color, value) = false) Then
				Me.OncolorChanging(value)
				Me.SendPropertyChanging
				Me._color = value
				Me.SendPropertyChanged("color")
				Me.OncolorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[nuevo-usado]", Storage:="_nuevo_usado", DbType:="Bit NOT NULL")>  _
	Public Property nuevo_usado() As Boolean
		Get
			Return Me._nuevo_usado
		End Get
		Set
			If ((Me._nuevo_usado = value)  _
						= false) Then
				Me.Onnuevo_usadoChanging(value)
				Me.SendPropertyChanging
				Me._nuevo_usado = value
				Me.SendPropertyChanged("nuevo_usado")
				Me.Onnuevo_usadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tipo() As String
		Get
			Return Me._tipo
		End Get
		Set
			If (String.Equals(Me._tipo, value) = false) Then
				Me.OntipoChanging(value)
				Me.SendPropertyChanging
				Me._tipo = value
				Me.SendPropertyChanged("tipo")
				Me.OntipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_combustible", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property combustible() As String
		Get
			Return Me._combustible
		End Get
		Set
			If (String.Equals(Me._combustible, value) = false) Then
				Me.OncombustibleChanging(value)
				Me.SendPropertyChanging
				Me._combustible = value
				Me.SendPropertyChanged("combustible")
				Me.OncombustibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kilometraje", DbType:="Int NOT NULL")>  _
	Public Property kilometraje() As Integer
		Get
			Return Me._kilometraje
		End Get
		Set
			If ((Me._kilometraje = value)  _
						= false) Then
				Me.OnkilometrajeChanging(value)
				Me.SendPropertyChanging
				Me._kilometraje = value
				Me.SendPropertyChanged("kilometraje")
				Me.OnkilometrajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_titulo", DbType:="VarChar(70) NOT NULL", CanBeNull:=false)>  _
	Public Property titulo() As String
		Get
			Return Me._titulo
		End Get
		Set
			If (String.Equals(Me._titulo, value) = false) Then
				Me.OntituloChanging(value)
				Me.SendPropertyChanging
				Me._titulo = value
				Me.SendPropertyChanged("titulo")
				Me.OntituloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property precio() As Decimal
		Get
			Return Me._precio
		End Get
		Set
			If ((Me._precio = value)  _
						= false) Then
				Me.OnprecioChanging(value)
				Me.SendPropertyChanging
				Me._precio = value
				Me.SendPropertyChanged("precio")
				Me.OnprecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_usuario", DbType:="Int NOT NULL")>  _
	Public Property id_usuario() As Integer
		Get
			Return Me._id_usuario
		End Get
		Set
			If ((Me._id_usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._id_usuario = value
				Me.SendPropertyChanged("id_usuario")
				Me.Onid_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ObjetoAuto_Auto_Caracteristica", Storage:="_Auto_Caracteristica", ThisKey:="id_auto", OtherKey:="id_auto")>  _
	Public Property Auto_Caracteristica() As EntitySet(Of Auto_Caracteristica)
		Get
			Return Me._Auto_Caracteristica
		End Get
		Set
			Me._Auto_Caracteristica.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ObjetoAuto_Auto_Clasificacion", Storage:="_Auto_Clasificacion", ThisKey:="id_auto", OtherKey:="id_auto")>  _
	Public Property Auto_Clasificacion() As EntitySet(Of Auto_Clasificacion)
		Get
			Return Me._Auto_Clasificacion
		End Get
		Set
			Me._Auto_Clasificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ObjetoAuto_Foto", Storage:="_Foto", ThisKey:="id_auto", OtherKey:="id_auto")>  _
	Public Property Foto() As EntitySet(Of Foto)
		Get
			Return Me._Foto
		End Get
		Set
			Me._Foto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_ObjetoAuto", Storage:="_Usuario", ThisKey:="id_usuario", OtherKey:="id_usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.ObjetoAuto.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ObjetoAuto.Add(Me)
					Me._id_usuario = value.id_usuario
				Else
					Me._id_usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Auto_Caracteristica(ByVal entity As Auto_Caracteristica)
		Me.SendPropertyChanging
		entity.ObjetoAuto = Me
	End Sub
	
	Private Sub detach_Auto_Caracteristica(ByVal entity As Auto_Caracteristica)
		Me.SendPropertyChanging
		entity.ObjetoAuto = Nothing
	End Sub
	
	Private Sub attach_Auto_Clasificacion(ByVal entity As Auto_Clasificacion)
		Me.SendPropertyChanging
		entity.ObjetoAuto = Me
	End Sub
	
	Private Sub detach_Auto_Clasificacion(ByVal entity As Auto_Clasificacion)
		Me.SendPropertyChanging
		entity.ObjetoAuto = Nothing
	End Sub
	
	Private Sub attach_Foto(ByVal entity As Foto)
		Me.SendPropertyChanging
		entity.ObjetoAuto = Me
	End Sub
	
	Private Sub detach_Foto(ByVal entity As Foto)
		Me.SendPropertyChanging
		entity.ObjetoAuto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_usuario As Integer
	
	Private _nombreUsuario As String
	
	Private _clave As String
	
	Private _nivelAcceso As Integer
	
	Private _fechaAlta As Date
	
	Private _fechaBaja As System.Nullable(Of Date)
	
	Private _Clasificacion As EntitySet(Of Clasificacion)
	
	Private _ObjetoAuto As EntitySet(Of ObjetoAuto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_usuarioChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_usuarioChanged()
    End Sub
    Partial Private Sub OnnombreUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnnombreUsuarioChanged()
    End Sub
    Partial Private Sub OnclaveChanging(value As String)
    End Sub
    Partial Private Sub OnclaveChanged()
    End Sub
    Partial Private Sub OnnivelAccesoChanging(value As Integer)
    End Sub
    Partial Private Sub OnnivelAccesoChanged()
    End Sub
    Partial Private Sub OnfechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaAltaChanged()
    End Sub
    Partial Private Sub OnfechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaBajaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Clasificacion = New EntitySet(Of Clasificacion)(AddressOf Me.attach_Clasificacion, AddressOf Me.detach_Clasificacion)
		Me._ObjetoAuto = New EntitySet(Of ObjetoAuto)(AddressOf Me.attach_ObjetoAuto, AddressOf Me.detach_ObjetoAuto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_usuario() As Integer
		Get
			Return Me._id_usuario
		End Get
		Set
			If ((Me._id_usuario = value)  _
						= false) Then
				Me.Onid_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._id_usuario = value
				Me.SendPropertyChanged("id_usuario")
				Me.Onid_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombreUsuario", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property nombreUsuario() As String
		Get
			Return Me._nombreUsuario
		End Get
		Set
			If (String.Equals(Me._nombreUsuario, value) = false) Then
				Me.OnnombreUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._nombreUsuario = value
				Me.SendPropertyChanged("nombreUsuario")
				Me.OnnombreUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clave", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property clave() As String
		Get
			Return Me._clave
		End Get
		Set
			If (String.Equals(Me._clave, value) = false) Then
				Me.OnclaveChanging(value)
				Me.SendPropertyChanging
				Me._clave = value
				Me.SendPropertyChanged("clave")
				Me.OnclaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nivelAcceso", DbType:="Int NOT NULL")>  _
	Public Property nivelAcceso() As Integer
		Get
			Return Me._nivelAcceso
		End Get
		Set
			If ((Me._nivelAcceso = value)  _
						= false) Then
				Me.OnnivelAccesoChanging(value)
				Me.SendPropertyChanging
				Me._nivelAcceso = value
				Me.SendPropertyChanged("nivelAcceso")
				Me.OnnivelAccesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaAlta", DbType:="DateTime NOT NULL")>  _
	Public Property fechaAlta() As Date
		Get
			Return Me._fechaAlta
		End Get
		Set
			If ((Me._fechaAlta = value)  _
						= false) Then
				Me.OnfechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._fechaAlta = value
				Me.SendPropertyChanged("fechaAlta")
				Me.OnfechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaBaja", DbType:="DateTime")>  _
	Public Property fechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._fechaBaja
		End Get
		Set
			If (Me._fechaBaja.Equals(value) = false) Then
				Me.OnfechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._fechaBaja = value
				Me.SendPropertyChanged("fechaBaja")
				Me.OnfechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Clasificacion", Storage:="_Clasificacion", ThisKey:="id_usuario", OtherKey:="id_usuario")>  _
	Public Property Clasificacion() As EntitySet(Of Clasificacion)
		Get
			Return Me._Clasificacion
		End Get
		Set
			Me._Clasificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_ObjetoAuto", Storage:="_ObjetoAuto", ThisKey:="id_usuario", OtherKey:="id_usuario")>  _
	Public Property ObjetoAuto() As EntitySet(Of ObjetoAuto)
		Get
			Return Me._ObjetoAuto
		End Get
		Set
			Me._ObjetoAuto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Clasificacion(ByVal entity As Clasificacion)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Clasificacion(ByVal entity As Clasificacion)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_ObjetoAuto(ByVal entity As ObjetoAuto)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_ObjetoAuto(ByVal entity As ObjetoAuto)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
End Class
